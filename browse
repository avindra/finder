#!/usr/bin/env -S deno run --allow-run --allow-net
import { getId, findId } from "./src/id.js";
import { read } from "./src/read.js";
import { searchFor } from "./src/search.ts";

/**
 * bitmask tested on Linux
 */
const devNo = Deno.fstatSync(Deno.stdin).dev;
const hasStdIn = (devNo & 0b101) !== 0;

const input = hasStdIn ? "" : prompt("Where you off to?") || "";
let unsafe = true;
let isBig = false;
const chk = function(o) {
	return new RegExp("^" + o, "i").test(input)
}

let trim = input.replace(/--\S+/g, "").replace(/^\s*\S+\s*/, "");

const  gs = "http://google.com/search?q=";


const e = input.match(/--\S+/g) || [];
for (let i = 0; i < e.length; i++) switch (e[i]) {
	// TBD: plumb context from the page
	case "--this":
		trim += " site:" + document.domain;
		continue;
	case "--safe":
		unsafe = false;
		continue
	case "--big":
		isBig = true;
		continue
}

/**
 * main() pattern matching construct
 * 
 * @see why use DuckDuckGo https://stackoverflow.com/a/64861546/270302
 */
if (chk("id") || hasStdIn) {
	const data = await (hasStdIn ? read() : getId(trim));
	const result = findId(data);

	if(result) {
		console.log(result);
	} else {
		console.error(`No id exists for ${result}`);
	}
} else if (chk("gi")) {
	searchFor(0, trim, isBig, unsafe);
} else if(chk("gn")) {
	searchFor(1, trim, isBig, unsafe);
} else if (chk("gm")) {
	searchFor(2, trim, isBig, unsafe);
} else if(chk("bi")) {
	searchFor(3, trim, isBig, unsafe);
} else if(chk("di")) {
	searchFor(4, trim, isBig, unsafe);
} else if(chk("gs")) {
	goto("https://google.com/search?q=");
} else if(chk("slang")) {
	goto("https://urbandictionary.com/define.php?term=")
} else if(chk("yt")) {
	goto("https://youtube.com/results?search_query=")
} else if(chk("wiki")) {
	goto("https://google.com/search?btnI&q=site:wikipedia.org ");
} else if(chk("imdb")) {
	//goto("https://google.com/search?btnI&q=imdb ")
	goto("https://duckduckgo.com/?q=%5Cimdb ");
} else if(chk("(first|lucky)")) {
	//goto("https://google.com/search?btnI&q=");
	goto("https://duckduckgo.com/?q=%5C");
} else if(chk("ebook")) {
	goto(gs + encodeURIComponent('-inurl:htm -inurl:html intitle:index of("/ebooks"|"/book") (chm|pdf|zip) Last Modified '));
} else if(chk("music")) {
	goto(gs + encodeURIComponent("intitle:index.of last modified  parent directory (mp4|m4a|mp3|wma|ogg) -htm -html -php -asp "));
} else if(chk("torrents?")) {
	goto("https://www.thepiratebay.org/search/", trim + "/0/7/0");
}


/**
 * TBD: reverse-image search via
 *  https://www.google.com/searchbyimage?image_url=$1
 *  https://www.bing.com/images/searchbyimage?FORM=IRSBIQ&cbir=sbi&imgurl=$1
 * https://yandex.com/images/search?source=collections&&url=$1&rpt=imageview
 * https://graph.baidu.com/details?isfromtusoupc=1&tn=pc&carousel=0&image=$1
 *
 */
